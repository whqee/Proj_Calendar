<<<<<<< HEAD
C51 COMPILER V9.59.0.0   DS1302                                                            03/31/2019 13:56:50 PAGE 1   
=======
C51 COMPILER V9.59.0.0   DS1302                                                            04/01/2019 20:28:31 PAGE 1   
>>>>>>> dev


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\ds1302.obj
COMPILER INVOKED BY: D:\A\Keil_MDK5.25\C51\BIN\C51.EXE ds1302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\ds1302.lst) TABS(2) OBJECT(.\Objects\ds1302.obj)

line level    source

   1          #include <ds1302.h>
   2          
   3          sbit SCLK = P1^0;
   4          sbit IO = P1^1;
   5          sbit RST = P1^2;
   6          
   7          
   8          u8 code DS1302_READ_ADDR[7] = { 0x81, 0x83, 0x85, 0x8b, 0x87, 0x89, 0x8d }; //0-6:  sec,min,hours,day,date
             -,mon,year
   9          u8 code DS1302_WRITE_ADDR[7] = { 0x80, 0x82, 0x84, 0x8a, 0x86, 0x88, 0x8c };//0-6:  sec,min,hours,day,date
             -,mon,year
  10          
  11          // u8 code DS1302_READ_ADDR[7] = {0x81, 0x83, 0x85, 0x87, 0x89, 0x8b, 0x8d}; //0-6:  s,min,hours,date,mont
             -h,day,year
  12          // u8 code DS1302_WRITE_ADDR[7] = {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c};//0-6:  s,min,hours,date,mont
             -h,day,year
  13          
  14          // Internal functions prototype:
  15          static u8 ds1302_read_reg(u8 addr);
  16          static void ds1302_write_reg(u8 addr, u8 dat);
  17          
  18          
  19          
  20          
  21          
  22          
  23          /** External Interface definitions starts  **/
  24          
  25          void ds1302_read_time(u8 temp[7])
  26          {
  27   1        u8 i = 7;
  28   1        while(i--)
  29   1          temp[i] = ds1302_read_reg(DS1302_READ_ADDR[i]);
  30   1      }
  31          
  32          
  33          void ds1302_set_time(u8 time[7])
  34          {
  35   1        u8 i = 7;
  36   1        ds1302_write_reg(0x8E,0x00);  //Disable WP and be ready to write
  37   1        while(i--)
  38   1          ds1302_write_reg(DS1302_WRITE_ADDR[i], time[i]);
  39   1        ds1302_write_reg(0x8e, 0x80); //Enable WP to disable write access
  40   1      }
  41          
  42          void ds1302_set_time_once(u8 write_addr_num, u8 t)
  43          {
  44   1        ds1302_write_reg(0x8E,0x00);  //Disable WP and be ready to write
  45   1        ds1302_write_reg(DS1302_WRITE_ADDR[write_addr_num], t);
  46   1        ds1302_write_reg(0x8e, 0x80); //Enable WP to disable write access
  47   1      }
  48          
<<<<<<< HEAD
  49          static u8 ds1302_read_reg(u8 addr)
  50          {
  51   1        u8 i = 0, dat = 0, dat1 = 0;
  52   1      
C51 COMPILER V9.59.0.0   DS1302                                                            03/31/2019 13:56:50 PAGE 2   
=======
  49          /** External Interface definitions end  **/
  50          
C51 COMPILER V9.59.0.0   DS1302                                                            04/01/2019 20:28:31 PAGE 2   
>>>>>>> dev

  51          
  52          
  53          
  54          
  55          
  56          
  57          /** Internal Interface functions below:  **/
  58          
  59          static u8 ds1302_read_reg(u8 addr)
  60          {
  61   1        u8 i = 0, dat = 0, dat1 = 0;
  62   1      
  63   1        RST = 0;
  64   1        _nop_();
  65   1      
  66   1        SCLK = 0;
  67   1        _nop_();
  68   1      
  69   1        RST = 1;              // Pull-up to get ready to write
  70   1        _nop_();
  71   1      
  72   1        for (i=0; i<8; i++)       // send 8bit addr
  73   1        {
  74   2          IO = addr & 0x01;     // send from LSB
  75   2          addr >>= 1;
  76   2      
  77   2          SCLK = 1;         // Pull-up and ds1302 read 'bit
  78   2          _nop_();
  79   2      
  80   2          SCLK = 0;         // Pull-down for next action
  81   2          _nop_();
  82   2        }
<<<<<<< HEAD
  83   1      
  84   1        RST = 0;
  85   1        _nop_();  //Below: neccessary to stabilise ds1302
  86   1      
  87   1        SCLK = 1;
  88   1        _nop_();
  89   1      
  90   1        IO = 0;
  91   1        _nop_();
  92   1      
  93   1        IO = 1;
  94   1        _nop_();
  95   1      
  96   1        return dat; 
  97   1      }
  98          
  99          
 100          static void ds1302_write_reg(u8 addr, u8 dat)
 101          {
 102   1        u8 i = 0;
 103   1      
 104   1        RST = 0;
 105   1        _nop_();        
 106   1      
 107   1        SCLK = 0;       
 108   1        _nop_();
 109   1      
 110   1        RST = 1;        
 111   1        _nop_();
 112   1      
 113   1        for (i=0; i<8; i++)   //write addr
 114   1        {
C51 COMPILER V9.59.0.0   DS1302                                                            03/31/2019 13:56:50 PAGE 3   
=======
  83   1        
  84   1        for (i=0; i<8; i++)       // read 8bit
  85   1        {
  86   2          dat1 = IO;//read start from LSB
  87   2          dat = (dat>>1) | (dat1<<7);
  88   2          SCLK = 1;
  89   2          _nop_();
  90   2          SCLK = 0;
  91   2          _nop_();
  92   2        }
  93   1      
  94   1        RST = 0;
  95   1        _nop_();  //Below: neccessary to stabilise ds1302
  96   1      
  97   1        SCLK = 1;
  98   1        _nop_();
  99   1      
 100   1        IO = 0;
 101   1        _nop_();
 102   1      
 103   1        IO = 1;
 104   1        _nop_();
 105   1      
 106   1        return dat; 
 107   1      }
 108          
 109          
 110          static void ds1302_write_reg(u8 addr, u8 dat)
 111          {
 112   1        u8 i = 0;
C51 COMPILER V9.59.0.0   DS1302                                                            04/01/2019 20:28:31 PAGE 3   
>>>>>>> dev

 113   1      
 114   1        RST = 0;
 115   1        _nop_();        
 116   1      
 117   1        SCLK = 0;       
 118   1        _nop_();
 119   1      
 120   1        RST = 1;        
 121   1        _nop_();
 122   1      
 123   1        for (i=0; i<8; i++)   //write addr
 124   1        {
 125   2          IO = addr & 0x01; 
 126   2          addr >>= 1;     
 127   2          SCLK = 1;     // Inform ds1302 to read 'bit
 128   2          _nop_();      
 129   2      
 130   2          SCLK = 0; 
 131   2          _nop_();
 132   2        }
 133   1      
 134   1        for (i=0; i<8; i++)   // Write dat to 'register
 135   1        {
 136   2          IO = dat & 0x01;
 137   2          dat >>= 1;
 138   2          SCLK = 1; 
 139   2          _nop_();
 140   2          SCLK = 0;
 141   2          _nop_();  
 142   2        }
 143   1           
 144   1        RST = 0;          // Disable write access
 145   1        _nop_();
 146   1      }
 147          
 148          
 149          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    296    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
